<!DOCTYPE html>
<html>
<head>
<title>AM32 EEPROM Generator</title>
<script>

var all_checkboxes = [
    // Name                  , def  , byte
    ["Reverse Rotation",       false, 17, ],
    ["Complementary PWM",      true , 20, ],
    ["Variable PWM",           true , 21, ],
    ["Bi-Directional",         false, 18, ],
    ["Stuck Rotor Protection", false, 22, ],
    ["Brake On Stop",          false, 28, ],
    ["Stall Protection",       false, 29, ],
    ["Sinusoidal Startup",     false, 19, ],
    ["Telemetry 30ms",         false, 31, ],
    ["Use Hall Sensors",       false, 39, ],
    ["Low Voltage Cutoff",     false, 36, ],
    ["Double Tap Reverse",     false, 38, ],
];

var all_sliders = [
    // Name                  ,  def ,  min ,  max ,   step, offset, byte, readonly
    ["Timing Advance"        ,     2,     0,     3,      1,      0,   23, false, ],
    ["Motor KV"              ,  2000,    20, 10220,     40,     20,   26, false, ],
    ["Motor Poles"           ,    14,     0,   255,      1,      0,   27, false, ],
    ["Startup Power"         ,   100,    50,   151,      1,      0,   25, false, ],
    ["PWM Frequency"         ,    24,     8,    48,      1,      0,   24, true , ],
    ["Beep Volume"           ,     7,     0,    10,      1,      0,   30, false, ],
    ["Stopped Brake Level"   ,    10,     0,    10,      1,      0,   41, false, ],
    ["Running Brake Level"   ,     9,     0,     9,      1,      0,   42, false, ],
    ["Sine Startup Range"    ,     5,     5,    25,      1,      0,   40, false, ],
    ["Sine Mode Power"       ,     5,     0,    10,      1,      0,   45, false, ],
    ["Servo Low Thresh"      ,  1000,   750,  1500,      2,    750,   32, false, ],
    ["Servo High Thresh"     ,  2000,  1750,  2260,      2,   1750,   33, false, ],
    ["Servo Neutral"         ,  1500,  1374,  1629,      1,   1374,   34, false, ],
    ["Servo Dead Band"       ,     0,     0,   255,      1,      0,   35, false, ],
    ["Low Voltage Cutoff"    ,   330,   250,   505,      1,    250,   37, false, ],
    ["Temperature Limit C"   ,   255,     0,   255,      1,      0,   43, false, ],
    ["Current Limit Amps"    ,     0,     0,   200,      2,      0,   44, false, ],
];

var saveByteArray; // this is a function

function onload()
{
    document.getElementById("file-input").addEventListener("change", readBinFile, false);
    document.getElementById("tbl_checkboxes").innerHTML = make_all_checkboxes();
    document.getElementById("tbl_sliders").innerHTML    = make_all_sliders();

    saveByteArray = (function () {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        return function (data, name) {
            var blob = new Blob([data], {type: "octet/stream"});
            var url = window.URL.createObjectURL(blob);
            a.href = url;
            a.download = name;
            a.click();
            window.URL.revokeObjectURL(url);
        };
    }());

    if ("serial" in navigator)
    {
    }
    else
    {
        document.getElementById("div_serialport").innerHTML = "WebSerial is not supported by your browser";
    }
}

function text_to_id(t)
{
    return t.toLowerCase().replace(" ", "").replace("-", "").replace(".", "");
}

function id_to_item(id)
{
    if (id.startsWith("chk_"))
    {
        for (var i = 0; i < all_checkboxes.length; i++)
        {
            if (("chk_" + text_to_id(all_checkboxes[i])) == id) {
                return all_checkboxes[i];
            }
        }
    }
    else
    {
        var id4 = id.substring(4);
        for (var i = 0; i < all_sliders.length; i++)
        {
            if (text_to_id(all_sliders[i]) == id4) {
                return all_sliders[i];
            }
        }
    }
}

function make_checkbox(x)
{
    var t;
    t = "<div style=\"display: table-cell; text-align: right;\"><label for=\"chk_" + text_to_id(x[0]) + "\">" + x[0] + "</label></div>\r\n";
    t += "<div style=\"display: table-cell; text-align: left\"><input id=\"chk_" + text_to_id(x[0]) + "\" type=\"checkbox\"";
    if (x[1])
    {
        t += " checked=\"checked\"";
    }
    t += " /></div>\r\n";
    return t;
}

function make_slider(x, i)
{
    var t;
    t = "<div style=\"display: table-cell; text-align: right; padding-right:5pt;\"><label for=\"txt_" + text_to_id(x[0]) + "\">" + x[0] + "</label></div>\r\n";
    t += "<div style=\"display: table-cell;\"><input id=\"txt_" + text_to_id(x[0]) + "\" type=\"number\" ";
    t += "min=\"" + x[2] + "\" max=\"" + x[3] + "\" value=\"" + x[1] + "\" step=\"" + x[4] + "\" ";
    t += "onchange=\"txt_onchange(" + i + ")\"";
    t += " /></div>\r\n";
    t += "<div style=\"display: table-cell;\"><input id=\"sld_" + text_to_id(x[0]) + "\" type=\"range\" ";
    t += "min=\"" + x[2] + "\" max=\"" + x[3] + "\" value=\"" + x[1] + "\" step=\"" + x[4] + "\" ";
    t += "onchange=\"sld_onchange(" + i + ")\"";
    t += " /></div>\r\n";
    t += "<div style=\"display: table-cell; padding-left:5pt;\">def = " + x[1] + "</div>\r\n";
    return t;
}

function make_all_checkboxes()
{
    var t = "";
    for (var i = 0; i < all_checkboxes.length; i++)
    {
        t += "<div style=\"display: table-row;\">\r\n";
        t += make_checkbox(all_checkboxes[i]);
        t += "</div>\r\n";
    }
    return t;
}

function make_all_sliders()
{
    var t = "";
    for (var i = 0; i < all_sliders.length; i++)
    {
        t += "<div style=\"display: table-row;\">\r\n";
        t += make_slider(all_sliders[i], i);
        t += "</div>\r\n";
    }
    return t;
}

var ui_locked = false;

function txt_onchange(i)
{
    if (ui_locked) {
        return;
    }
    ui_locked = true;
    var sld = all_sliders[i];
    var v = document.getElementById("txt_" + text_to_id(sld[0])).value;
    if (v < sld[2])
    {
        v = sld[2];
    }
    if (v > sld[3])
    {
        v = sld[3];
    }
    document.getElementById("sld_" + text_to_id(sld[0])).value = v;
    ui_locked = false;
}

function sld_onchange(i)
{
    if (ui_locked) {
        return;
    }
    ui_locked = true;
    var sld = all_sliders[i];
    var v = document.getElementById("sld_" + text_to_id(sld[0])).value;
    if (v < sld[2])
    {
        v = sld[2];
    }
    if (v > sld[3])
    {
        v = sld[3];
    }
    document.getElementById("txt_" + text_to_id(sld[0])).value = v;
    ui_locked = false;
}

function readBinFile(e)
{
    var file = e.target.files[0];
    if (!file) {
        return;
    }
    var reader = new FileReader();
    reader.onload = function(e) {
        var barr = new Uint8Array(e.target.result);
        readBin(barr);
    };
    reader.readAsArrayBuffer(file);
}

function readBin(barr)
{
    var dbg_txt = "";
    for (var i = 0; i < all_checkboxes.length; i++)
    {
        var c = all_checkboxes[i];
        var ele = document.getElementById("chk_" + text_to_id(c[0]));
        ele.checked = barr[c[2]] != 0;
    }

    for (var i = 0; i < all_sliders.length; i++)
    {
        var sld = all_sliders[i];
        var bidx = sld[6];
        var eles = document.getElementById("sld_" + text_to_id(sld[0]));
        var elet = document.getElementById("txt_" + text_to_id(sld[0]));
        var val = barr[bidx];
        val *= sld[4];
        val += sld[5];
        if (val < sld[2] || val > sld[3])
        {
            dbg_txt += "\"" + sld[0] + "\" value " + val + " is out of range\r\n";
            if (val < sld[2])
            {
                val = sld[2]
            }
            if (val > sld[3])
            {
                val = sld[3]
            }
        }
        elet.value = val;
        txt_onchange(i);
    }
    document.getElementById("txt_debug").value = dbg_txt;
}

function generateBin()
{
    var dbg_txt = "";
    let buffer = new ArrayBuffer(176);
    let buffer8 = new Uint8Array(buffer);
    for (var i = 0; i < buffer8.length; i++)
    {
        buffer8[i] = 0xFF;
    }
    buffer8[1] = 2; // EEPROM layout version
    for (var i = 0; i < all_checkboxes.length; i++)
    {
        var c = all_checkboxes[i];
        var ele = document.getElementById("chk_" + text_to_id(c[0]));
        buffer8[c[2]] = ele.checked ? 1 : 0;
    }
    for (var i = 0; i < all_sliders.length; i++)
    {
        var sld = all_sliders[i];
        var ele = document.getElementById("txt_" + text_to_id(sld[0]));
        var val = ele.value;
        val -= sld[5];
        val /= sld[4];
        if (val < 0 || val > 255) {
            dbg_txt += "\"" + sld[0] + "\" byte value " + val + " is overflowing\r\n";
            if (val < 0) {
                val = 0;
            }
            if (val > 255) {
                val = 255;
            }
        }
        buffer8[sld[6]] = Math.round(val);
    }
    document.getElementById("txt_debug").value = dbg_txt;
    return buffer8;
}

function saveBinFile()
{
    saveByteArray(generateBin(), "am32-eeprom.bin");
}

var serport = null;
var serport_reader = null;
var serport_writer = null;

const pkt_time = 300;

async function serport_connect()
{
    var toopen = false;
    if (serport == null) {
        toopen = true;
    }
    if (toopen)
    {
        const port = await navigator.serial.requestPort();

        await port.open({ baudRate: 19200 });

        serport = port;
        serport_writer = await port.writable.getWriter();
        serport_reader = await port.readable.getReader();

        var btn = document.getElementById("btn_serconnect");
        btn.value = "Disconnect";
        btn.onclick = serport_disconnect;
        document.getElementById("span_serport").innerHTML = "(connected)";

        port.addEventListener("connect", (event) => {
            console.log("port on connect");
            var btn = document.getElementById("btn_serconnect");
            btn.value = "Disconnect";
            btn.onclick = serport_disconnect;
            document.getElementById("span_serport").innerHTML = "(connected)";
        });

        port.addEventListener("disconnect", (event) => {
            console.log("port on disconnect");
            serport = null;
            var btn = document.getElementById("btn_serconnect");
            btn.value = "Connect";
            btn.onclick = serport_connect;
            document.getElementById("span_serport").innerHTML = "";
        });
    }
}

async function serport_disconnect()
{
    if (serport != null)
    {
        serport.close();
    }
    var btn = document.getElementById("btn_serconnect");
    btn.value = "Connect";
    btn.onclick = serport_connect;
    serport = null;
    document.getElementById("span_serport").innerHTML = "";
}

async function serport_readToEnd()
{
    if (serport == null) {
        return;
    }
    while (serport.readable)
    {
        let { value, done } = await Promise.race([
            serport_reader.read(),
            new Promise((_, reject) => setTimeout(reject, pkt_time, new Error("timeout")))
        ]);
        return value;
    }
    return [];
}

async function serport_read()
{
    if (serport == null) {
        return;
    }

    var buffer = new ArrayBuffer(21);
    var buffer8 = new Uint8Array(buffer);
    var i;
    for (i = 0; i < 12; i++)
    {
        buffer8[i] = 0;
    }
    buffer8[i] = '\r'.charCodeAt(0); i++;
    buffer8[i] = 'B' .charCodeAt(0); i++;
    buffer8[i] = 'L' .charCodeAt(0); i++;
    buffer8[i] = 'H' .charCodeAt(0); i++;
    buffer8[i] = 'e' .charCodeAt(0); i++;
    buffer8[i] = 'l' .charCodeAt(0); i++;
    buffer8[i] = 'i' .charCodeAt(0); i++;
    buffer8[i] = 0xF4;               i++;
    buffer8[i] = 0x7D;               i++;

    await serport_writer.write(buffer8);

    setTimeout(async function () {

        var tmp = await serport_readToEnd();
        if (tmp == null || tmp.length < 30) {
            document.getElementById("txt_debug").value = "ESC failed to reply to initial query";
            return;
        }

        var buffer = new ArrayBuffer(6);
        var buffer8 = new Uint8Array(buffer);
        var i = 0;
        buffer8[i] = 0xFF; i++;
        buffer8[i] = 0x00; i++;
        buffer8[i] = 0x7C; i++;
        buffer8[i] = 0x00; i++;
        buffer8[i] = 0x10; i++;
        buffer8[i] = 0xD4; i++;

        await serport_writer.write(buffer8);

        setTimeout(async function () {

            var tmp = await serport_readToEnd();
            if (tmp == null || tmp.length < 7) {
                document.getElementById("txt_debug").value = "ESC failed to ack address set 0x7C00";
                return;
            }

            var buffer = new ArrayBuffer(4);
            var buffer8 = new Uint8Array(buffer);
            var i = 0;
            buffer8[i] = 0x03; i++;
            buffer8[i] = 0x30; i++;
            buffer8[i] = 0x00; i++;
            buffer8[i] = 0xE4; i++;

            await serport_writer.write(buffer8);

            setTimeout(async function () {

                var data1 = await serport_readToEnd();
                if (data1 == null || data1.length < 55) {
                    document.getElementById("txt_debug").value = "ESC failed to reply first data packet";
                    console.log(data1);
                    return;
                }

                if (data1[0] == 0x03 && data1[1] == 0x30 && data1[2] == 0x00 && data1[3] == 0xE4) {
                    data1 = data1.slice(4);
                }

                var buffer = new ArrayBuffer(6);
                var buffer8 = new Uint8Array(buffer);
                var i = 0;
                buffer8[i] = 0xFF; i++;
                buffer8[i] = 0x00; i++;
                buffer8[i] = 0x7C; i++;
                buffer8[i] = 0x30; i++;
                buffer8[i] = 0x10; i++;
                buffer8[i] = 0xC0; i++;

                await serport_writer.write(buffer8);

                setTimeout(async function () {

                    var tmp = await serport_readToEnd();
                    if (tmp == null || tmp.length < 7) {
                        document.getElementById("txt_debug").value = "ESC failed to ack address set 0x7C30";
                        return;
                    }

                    var buffer = new ArrayBuffer(4);
                    var buffer8 = new Uint8Array(buffer);
                    var i = 0;
                    buffer8[i] = 0x03; i++;
                    buffer8[i] = 0x80; i++;
                    buffer8[i] = 0x01; i++;
                    buffer8[i] = 0x50; i++;

                    await serport_writer.write(buffer8);

                    setTimeout(async function () {

                        var data2 = await serport_readToEnd();
                        if (data2 == null || data2.length < 135) {
                            document.getElementById("txt_debug").value = "ESC failed to reply second data packet";
                            console.log(data2);
                            return;
                        }
                        if (data2[0] == 0x03 && data2[1] == 0x80 && data2[2] == 0x01 && data2[3] == 0x50) {
                            data2 = data2.slice(4);
                        }

                        var buffer = new ArrayBuffer(176);
                        var buffer8 = new Uint8Array(buffer);
                        for (var i = 0; i < buffer8.length; i++)
                        {
                            if (i < 0x30)
                            {
                                buffer8[i] = data1[i];
                            }
                            else if (i >= 0x30 && i <= (0x30 + 0x80))
                            {
                                buffer8[i] = data2[i - 0x30];
                            }
                            else
                            {
                                buffer8[i] = 0xFF;
                            }
                        }
                        readBin(buffer8);

                    }, pkt_time);

                }, pkt_time);

            }, pkt_time);

        }, pkt_time);

    }, pkt_time);
}

async function serport_write()
{
    if (serport == null) {
        return;
    }
}

</script>
</head>
<body onload="onload()">

<div style="display: table; width: 100%;">
    <div style="display: table-row-group;">
        <div style="display: table-row;">
            <div style="display: table-cell; width: 50%;">
                <fieldset><legend>Open *.BIN File</legend>
                    <input type="file" id="file-input" />
                </fieldset>
            </div>
            <div style="display: table-cell;">
                <fieldset><legend>Save *.BIN File</legend>
                    <input type="button" value="Save" onclick="saveBinFile()" />
                </fieldset>
            </div>
        </div>
    </div>
</div>

<fieldset><legend>Options</legend>
    <div style="display: table;">
        <div style="display: table-row-group;" id="tbl_checkboxes">
            
        </div>
    </div>
    <div style="display: table;">
        <div style="display: table-row-group;" id="tbl_sliders">
            
        </div>
    </div>
</fieldset>
<fieldset><legend>Debug</legend>
<textarea id="txt_debug" style="width:100%; min-height:100px;">
</textarea>
</fieldset>
<fieldset><legend>Serial Port&nbsp;<span id="span_serport"></span></legend>
<div id="div_serialport">
<input type="button" id="btn_serconnect" value="Connect" onclick="serport_connect()" />
<input type="button" id="btn_serread"    value="Read"    onclick="serport_read()" />
<input type="button" id="btn_serwrite"   value="Write"   onclick="serport_write()" />
</div>
</fieldset>
</body>
</html>
